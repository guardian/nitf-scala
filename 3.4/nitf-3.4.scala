// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.gu.nitf.model


/** The core schema for the News Industry Text Format.Date of creation of this XML Schema document version: 2012-01-12 (xml_lang error fixed)
*/

trait Align

object Align {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Align]): Align = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Align) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Align] = Seq(LeftType, Center, RightType, Justify, CharType)
}

case object LeftType extends Align { override def toString = "left" }
case object Center extends Align { override def toString = "center" }
case object RightType extends Align { override def toString = "right" }
case object Justify extends Align { override def toString = "justify" }
case object CharType extends Align { override def toString = "char" }

trait Valign

object Valign {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Valign]): Valign = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Valign) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Valign] = Seq(Top, Middle, Bottom, Baseline)
}

case object Top extends Valign { override def toString = "top" }
case object Middle extends Valign { override def toString = "middle" }
case object Bottom extends Valign { override def toString = "bottom" }
case object Baseline extends Valign { override def toString = "baseline" }


case class Nitf(head: Option[com.gu.nitf.model.Head] = None,
  body: com.gu.nitf.model.Body,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val uno = attributes.get("@uno") map { _.as[String]}
  lazy val version = attributes("@version").as[String]
  lazy val changeDate = attributes("@change.date").as[String]
  lazy val changeTime = attributes("@change.time").as[String]
  lazy val baselang = attributes.get("@baselang") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[Seq[String]]}
}

      


case class Head(title: Option[com.gu.nitf.model.Title] = None,
  meta: Seq[com.gu.nitf.model.Meta] = Nil,
  tobject: Option[com.gu.nitf.model.Tobject] = None,
  iim: Option[com.gu.nitf.model.Iim] = None,
  docdata: Option[com.gu.nitf.model.Docdata] = None,
  pubdata: Seq[com.gu.nitf.model.Pubdata] = Nil,
  revisionHistory: Seq[com.gu.nitf.model.RevisionHistory] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait Type

object Type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Type]): Type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Type] = Seq(Main, Subtitle, Parttitle, Alternate, Abbrev, Other)
}

case object Main extends Type { override def toString = "main" }
case object Subtitle extends Type { override def toString = "subtitle" }
case object Parttitle extends Type { override def toString = "parttitle" }
case object Alternate extends Type { override def toString = "alternate" }
case object Abbrev extends Type { override def toString = "abbrev" }
case object Other extends Type { override def toString = "other" }


case class Title(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[Type]}
}

      


case class Meta(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val httpEquiv = attributes.get("@http-equiv") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val content = attributes("@content").as[String]
}

      


case class Tobject(tobjectProperty: Seq[com.gu.nitf.model.TobjectProperty] = Nil,
  tobjectSubject: Seq[com.gu.nitf.model.TobjectSubject] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val tobjectType = attributes("@tobject.type").as[String]
}

      


case class TobjectProperty(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val tobjectPropertyType = attributes("@tobject.property.type").as[String]
}

      


case class TobjectSubject(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val tobjectSubjectIpr = attributes("@tobject.subject.ipr").as[String]
  lazy val tobjectSubjectRefnum = attributes("@tobject.subject.refnum").as[String]
  lazy val tobjectSubjectCode = attributes.get("@tobject.subject.code") map { _.as[String]}
  lazy val tobjectSubjectType = attributes.get("@tobject.subject.type") map { _.as[String]}
  lazy val tobjectSubjectMatter = attributes.get("@tobject.subject.matter") map { _.as[String]}
  lazy val tobjectSubjectDetail = attributes.get("@tobject.subject.detail") map { _.as[String]}
}

      


case class Iim(ds: Seq[com.gu.nitf.model.Ds] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val ver = attributes.get("@ver") map { _.as[String]}
}

      


case class Ds(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val num = attributes("@num").as[String]
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      


case class Docdata(docdataoption: Seq[scalaxb.DataRecord[com.gu.nitf.model.DocdataOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val managementStatus = attributes.get("@management-status") map { _.as[String]}
  lazy val managementDocIdref = attributes.get("@management-doc-idref") map { _.as[String]}
  lazy val managementIdrefStatus = attributes.get("@management-idref-status") map { _.as[String]}
}

      

trait DocdataOption

case class Correction(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val info = attributes.get("@info") map { _.as[String]}
  lazy val idString = attributes.get("@id-string") map { _.as[String]}
  lazy val regsrc = attributes.get("@regsrc") map { _.as[String]}
}

      


case class Evloc(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val isoCc = attributes.get("@iso-cc") map { _.as[String]}
  lazy val stateProv = attributes.get("@state-prov") map { _.as[String]}
  lazy val countyDist = attributes.get("@county-dist") map { _.as[String]}
  lazy val city = attributes.get("@city") map { _.as[String]}
}

      


case class DocId(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val regsrc = attributes.get("@regsrc") map { _.as[String]}
  lazy val idString = attributes.get("@id-string") map { _.as[String]}
}

      


case class DelList(dellistsequence1: Seq[com.gu.nitf.model.DelListSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

case class DelListSequence1(fromSrc: com.gu.nitf.model.FromSrc)

case class FromSrc(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val srcName = attributes.get("@src-name") map { _.as[String]}
  lazy val levelNumber = attributes.get("@level-number") map { _.as[String]}
}

      


case class Urgency(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val edUrg = attributes.get("@ed-urg") map { _.as[String]}
}

      


case class Fixture(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val fixId = attributes.get("@fix-id") map { _.as[String]}
}

      


case class DateIssue(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val norm = attributes.get("@norm") map { _.as[String]}
}

      


case class DateRelease(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val norm = attributes.get("@norm") map { _.as[String]}
}

      


case class DateExpire(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val norm = attributes.get("@norm") map { _.as[String]}
}

      


case class DocScope(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val scope = attributes.get("@scope") map { _.as[String]}
}

      


case class Series(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val seriesName = attributes.get("@series.name") map { _.as[String]}
  lazy val seriesPart = attributes("@series.part").as[String]
  lazy val seriesTotalpart = attributes("@series.totalpart").as[String]
}

      


case class EdMsg(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val msgType = attributes.get("@msg-type") map { _.as[String]}
  lazy val info = attributes.get("@info") map { _.as[String]}
}

      


case class DuKey(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val generation = attributes.get("@generation") map { _.as[String]}
  lazy val part = attributes.get("@part") map { _.as[String]}
  lazy val version = attributes.get("@version") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
}

      


case class DocCopyright(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val year = attributes.get("@year") map { _.as[String]}
  lazy val holder = attributes.get("@holder") map { _.as[String]}
}

      


case class DocRights(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val owner = attributes.get("@owner") map { _.as[String]}
  lazy val startdate = attributes.get("@startdate") map { _.as[String]}
  lazy val enddate = attributes.get("@enddate") map { _.as[String]}
  lazy val agent = attributes.get("@agent") map { _.as[String]}
  lazy val geography = attributes.get("@geography") map { _.as[String]}
  lazy val locationCode = attributes.get("@location-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val limitations = attributes.get("@limitations") map { _.as[String]}
}

      


case class KeyList(keylistsequence1: Seq[com.gu.nitf.model.KeyListSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

case class KeyListSequence1(keyword: com.gu.nitf.model.Keyword)

case class Keyword(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
}

      


case class IdentifiedContent(identifiedcontentoption: Seq[scalaxb.DataRecord[com.gu.nitf.model.IdentifiedContentOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DocdataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait IdentifiedContentOption
trait TypeType

object TypeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.TypeType]): TypeType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TypeType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TypeType] = Seq(Print, Audio, Video, Web, Appliance, OtherValue)
}

case object Print extends TypeType { override def toString = "print" }
case object Audio extends TypeType { override def toString = "audio" }
case object Video extends TypeType { override def toString = "video" }
case object Web extends TypeType { override def toString = "web" }
case object Appliance extends TypeType { override def toString = "appliance" }
case object OtherValue extends TypeType { override def toString = "other" }


case class Pubdata(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[TypeType]}
  lazy val itemLength = attributes.get("@item-length") map { _.as[String]}
  lazy val unitOfMeasure = attributes.get("@unit-of-measure") map { _.as[String]}
  lazy val datePublication = attributes.get("@date.publication") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val issn = attributes.get("@issn") map { _.as[String]}
  lazy val volume = attributes.get("@volume") map { _.as[String]}
  lazy val number = attributes.get("@number") map { _.as[String]}
  lazy val issue = attributes.get("@issue") map { _.as[String]}
  lazy val editionName = attributes.get("@edition.name") map { _.as[String]}
  lazy val editionArea = attributes.get("@edition.area") map { _.as[String]}
  lazy val positionSection = attributes.get("@position.section") map { _.as[String]}
  lazy val positionSequence = attributes.get("@position.sequence") map { _.as[String]}
  lazy val exRef = attributes.get("@ex-ref") map { _.as[String]}
}

      

trait FunctionTypeType

object FunctionTypeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.FunctionTypeType]): FunctionTypeType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FunctionTypeType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FunctionTypeType] = Seq(WriterAuthor, Editor, Producer, Archivist, Videographer, GraphicArtist, Photographer, Statistician, OtherValue2)
}

case object WriterAuthor extends FunctionTypeType { override def toString = "writer-author" }
case object Editor extends FunctionTypeType { override def toString = "editor" }
case object Producer extends FunctionTypeType { override def toString = "producer" }
case object Archivist extends FunctionTypeType { override def toString = "archivist" }
case object Videographer extends FunctionTypeType { override def toString = "videographer" }
case object GraphicArtist extends FunctionTypeType { override def toString = "graphic-artist" }
case object Photographer extends FunctionTypeType { override def toString = "photographer" }
case object Statistician extends FunctionTypeType { override def toString = "statistician" }
case object OtherValue2 extends FunctionTypeType { override def toString = "other" }


case class RevisionHistory(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val function = attributes.get("@function") map { _.as[FunctionTypeType]}
  lazy val norm = attributes.get("@norm") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
}

      


case class Body(bodyHead: Option[com.gu.nitf.model.BodyHead] = None,
  bodyContent: Seq[com.gu.nitf.model.BodyContent] = Nil,
  bodyEnd: Option[com.gu.nitf.model.BodyEnd] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class BodyHead(hedline: Seq[com.gu.nitf.model.Hedline] = Nil,
  note: Seq[com.gu.nitf.model.Note] = Nil,
  rights: Option[com.gu.nitf.model.Rights] = None,
  byline: Seq[com.gu.nitf.model.Byline] = Nil,
  distributor: Option[com.gu.nitf.model.Distributor] = None,
  dateline: Seq[com.gu.nitf.model.Dateline] = Nil,
  abstractValue: Seq[com.gu.nitf.model.Abstract] = Nil,
  series: Option[com.gu.nitf.model.Series] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class Hedline(hl1: com.gu.nitf.model.Hl1,
  hl2: Seq[com.gu.nitf.model.Hl2] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class Hl1(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait Hl1Option

case class Hl2(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait Hl2Option
trait Noteclass

object Noteclass {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Noteclass]): Noteclass = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Noteclass) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Noteclass] = Seq(Cpyrt, End, Hd, Editorsnote, Trademk, Undef)
}

case object Cpyrt extends Noteclass { override def toString = "cpyrt" }
case object End extends Noteclass { override def toString = "end" }
case object Hd extends Noteclass { override def toString = "hd" }
case object Editorsnote extends Noteclass { override def toString = "editorsnote" }
case object Trademk extends Noteclass { override def toString = "trademk" }
case object Undef extends Noteclass { override def toString = "undef" }

trait TypeType2

object TypeType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.TypeType2]): TypeType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TypeType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TypeType2] = Seq(Std, Pa, Npa)
}

case object Std extends TypeType2 { override def toString = "std" }
case object Pa extends TypeType2 { override def toString = "pa" }
case object Npa extends TypeType2 { override def toString = "npa" }


case class Note(notesequence1: Seq[com.gu.nitf.model.NoteSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val noteclass = attributes.get("@noteclass") map { _.as[Noteclass]}
  lazy val typeValue = attributes("@type").as[TypeType2]
}

      

case class NoteSequence1(bodyContent: com.gu.nitf.model.BodyContent)

case class Rights(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait RightsOption

case class RightsOwner(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RightsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val contact = attributes.get("@contact") map { _.as[String]}
}

      


case class RightsStartdate(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RightsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val norm = attributes.get("@norm") map { _.as[String]}
}

      


case class RightsEnddate(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RightsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val norm = attributes.get("@norm") map { _.as[String]}
}

      


case class RightsAgent(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RightsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val contact = attributes.get("@contact") map { _.as[String]}
}

      


case class RightsGeography(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RightsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val locationCode = attributes.get("@location-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      


case class RightsType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RightsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class RightsLimitations(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RightsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class Byline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait BylineOption

case class Byttl(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BylineOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait ByttlOption

case class Distributor(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait DistributorOption

case class Dateline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait DatelineOption

case class StoryDate(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DatelineOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val norm = attributes.get("@norm") map { _.as[String]}
}

      


case class Abstract(abstractoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait AbstractOption

case class Copyrite(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait CopyriteOption

case class CopyriteYear(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends CopyriteOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class CopyriteHolder(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends CopyriteOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class BodyContent(bodycontentoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait BodyContentOption

case class Block(blocksequence1: Option[com.gu.nitf.model.BlockSequence1] = None,
  blockoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  blocksequence2: Option[com.gu.nitf.model.BlockSequence2] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BodyContentOption with DdOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

case class BlockSequence2(datasource: Option[com.gu.nitf.model.Datasource] = None)
trait BlockOption
case class BlockSequence1(tobject: Option[com.gu.nitf.model.Tobject] = None,
  keyList: Option[com.gu.nitf.model.KeyList] = None,
  classifier: Seq[com.gu.nitf.model.Classifier] = Nil,
  byline: Option[com.gu.nitf.model.Byline] = None,
  dateline: Option[com.gu.nitf.model.Dateline] = None,
  copyrite: Option[com.gu.nitf.model.Copyrite] = None,
  abstractValue: Seq[com.gu.nitf.model.Abstract] = Nil)


case class P(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val lede = attributes.get("@lede") map { _.as[String]}
  lazy val summary = attributes.get("@summary") map { _.as[String]}
  lazy val optionalText = attributes.get("@optional-text") map { _.as[String]}
}

      

trait POption
trait AlignType

object AlignType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.AlignType]): AlignType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: AlignType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[AlignType] = Seq(LeftTypeValue, CenterValue, RightTypeValue)
}

case object LeftTypeValue extends AlignType { override def toString = "left" }
case object CenterValue extends AlignType { override def toString = "center" }
case object RightTypeValue extends AlignType { override def toString = "right" }

trait Frame

object Frame {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Frame]): Frame = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Frame) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Frame] = Seq(Void, Above, Below, Hsides, Lhs, Rhs, Vsides, Box, Border)
}

case object Void extends Frame { override def toString = "void" }
case object Above extends Frame { override def toString = "above" }
case object Below extends Frame { override def toString = "below" }
case object Hsides extends Frame { override def toString = "hsides" }
case object Lhs extends Frame { override def toString = "lhs" }
case object Rhs extends Frame { override def toString = "rhs" }
case object Vsides extends Frame { override def toString = "vsides" }
case object Box extends Frame { override def toString = "box" }
case object Border extends Frame { override def toString = "border" }

trait Rules

object Rules {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Rules]): Rules = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Rules) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Rules] = Seq(NoneType, Basic, Rows, Cols, AllType)
}

case object NoneType extends Rules { override def toString = "none" }
case object Basic extends Rules { override def toString = "basic" }
case object Rows extends Rules { override def toString = "rows" }
case object Cols extends Rules { override def toString = "cols" }
case object AllType extends Rules { override def toString = "all" }


case class Table(caption: Option[com.gu.nitf.model.Caption] = None,
  tableoption: Option[scalaxb.DataRecord[com.gu.nitf.model.TableOption]] = None,
  thead: Option[com.gu.nitf.model.Thead] = None,
  tfoot: Option[com.gu.nitf.model.Tfoot] = None,
  tableoption2: Seq[scalaxb.DataRecord[com.gu.nitf.model.TableOption2]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption with NitfTableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val tabletype = attributes.get("@tabletype") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[AlignType]}
  lazy val width = attributes.get("@width") map { _.as[String]}
  lazy val cols = attributes.get("@cols") map { _.as[String]}
  lazy val border = attributes.get("@border") map { _.as[String]}
  lazy val frame = attributes.get("@frame") map { _.as[Frame]}
  lazy val rules = attributes.get("@rules") map { _.as[Rules]}
  lazy val cellspacing = attributes.get("@cellspacing") map { _.as[String]}
  lazy val cellpadding = attributes.get("@cellpadding") map { _.as[String]}
}

      

trait TableOption
trait TableOption2

case class Media(mediaMetadata: Seq[com.gu.nitf.model.MediaMetadata] = Nil,
  mediasequence1: Seq[com.gu.nitf.model.MediaSequence1] = Nil,
  mediaCaption: Seq[com.gu.nitf.model.MediaCaption] = Nil,
  mediaProducer: Option[com.gu.nitf.model.MediaProducer] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val mediaType = attributes("@media-type").as[String]
}

      

case class MediaSequence1(mediaReference: com.gu.nitf.model.MediaReference,
  mediaObject: Option[com.gu.nitf.model.MediaObject] = None)

trait Units

object Units {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Units]): Units = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Units) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Units] = Seq(Pixels)
}

case object Pixels extends Units { override def toString = "pixels" }

trait Noflow

object Noflow {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Noflow]): Noflow = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Noflow) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Noflow] = Seq(NoflowValue)
}

case object NoflowValue extends Noflow { override def toString = "noflow" }


case class MediaReference(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val source = attributes.get("@source") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val mimeType = attributes.get("@mime-type") map { _.as[String]}
  lazy val coding = attributes.get("@coding") map { _.as[String]}
  lazy val time = attributes.get("@time") map { _.as[String]}
  lazy val timeUnitOfMeasure = attributes.get("@time-unit-of-measure") map { _.as[String]}
  lazy val outcue = attributes.get("@outcue") map { _.as[String]}
  lazy val sourceCredit = attributes.get("@source-credit") map { _.as[String]}
  lazy val copyright = attributes.get("@copyright") map { _.as[String]}
  lazy val alternateText = attributes.get("@alternate-text") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val width = attributes.get("@width") map { _.as[String]}
  lazy val units = attributes.get("@units") map { _.as[Units]}
  lazy val imagemap = attributes.get("@imagemap") map { _.as[String]}
  lazy val noflow = attributes.get("@noflow") map { _.as[Noflow]}
  lazy val dataLocation = attributes.get("@data-location") map { _.as[String]}
}

      


case class MediaMetadata(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val name = attributes("@name").as[String]
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      


case class MediaObject(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val encoding = attributes("@encoding").as[String]
}

      


case class MediaCaption(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait MediaCaptionOption

case class MediaProducer(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait MediaProducerOption

case class Ol(olsequence1: Seq[com.gu.nitf.model.OlSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val seqnum = attributes.get("@seqnum") map { _.as[String]}
}

      

case class OlSequence1(li: com.gu.nitf.model.Li)

case class Ul(ulsequence1: Seq[com.gu.nitf.model.UlSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

case class UlSequence1(li: com.gu.nitf.model.Li)

case class Li(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait LiOption

case class Dl(dloption: Seq[scalaxb.DataRecord[com.gu.nitf.model.DlOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait DlOption

case class Dt(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DlOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait DtOption

case class Dd(ddoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DlOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait DdOption
trait Nowrap

object Nowrap {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Nowrap]): Nowrap = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Nowrap) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Nowrap] = Seq(NowrapValue)
}

case object NowrapValue extends Nowrap { override def toString = "nowrap" }


case class Bq(bqsequence1: Seq[com.gu.nitf.model.BqSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val nowrap = attributes.get("@nowrap") map { _.as[Nowrap]}
  lazy val quoteSource = attributes.get("@quote-source") map { _.as[String]}
}

      

case class BqSequence1(block: Seq[com.gu.nitf.model.Block] = Nil,
  credit: Option[com.gu.nitf.model.Credit] = None)


case class Credit(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait CreditOption

case class Fn(fnsequence1: Seq[com.gu.nitf.model.FnSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

case class FnSequence1(bodyContent: com.gu.nitf.model.BodyContent)

case class Pre(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class Hr(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class Datasource(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait AlignType2

object AlignType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.AlignType2]): AlignType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: AlignType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[AlignType2] = Seq(TopValue, BottomValue, LeftTypeValue2, RightTypeValue2)
}

case object TopValue extends AlignType2 { override def toString = "top" }
case object BottomValue extends AlignType2 { override def toString = "bottom" }
case object LeftTypeValue2 extends AlignType2 { override def toString = "left" }
case object RightTypeValue2 extends AlignType2 { override def toString = "right" }


case class Caption(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[AlignType2]}
}

      

trait CaptionOption

case class Col(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val span = attributes("@span").as[String]
  lazy val width = attributes.get("@width") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[Align]}
  lazy val char = attributes.get("@char") map { _.as[String]}
  lazy val charoff = attributes.get("@charoff") map { _.as[String]}
  lazy val valign = attributes.get("@valign") map { _.as[Valign]}
}

      


case class Colgroup(col: Seq[com.gu.nitf.model.Col] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[Align]}
  lazy val char = attributes.get("@char") map { _.as[String]}
  lazy val charoff = attributes.get("@charoff") map { _.as[String]}
  lazy val valign = attributes.get("@valign") map { _.as[Valign]}
}

      


case class Thead(tr: Seq[com.gu.nitf.model.Tr] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[Align]}
  lazy val char = attributes.get("@char") map { _.as[String]}
  lazy val charoff = attributes.get("@charoff") map { _.as[String]}
  lazy val valign = attributes.get("@valign") map { _.as[Valign]}
}

      


case class Tbody(tr: Seq[com.gu.nitf.model.Tr] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TableOption2 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[Align]}
  lazy val char = attributes.get("@char") map { _.as[String]}
  lazy val charoff = attributes.get("@charoff") map { _.as[String]}
  lazy val valign = attributes.get("@valign") map { _.as[Valign]}
}

      


case class Tfoot(tr: Seq[com.gu.nitf.model.Tr] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[Align]}
  lazy val char = attributes.get("@char") map { _.as[String]}
  lazy val charoff = attributes.get("@charoff") map { _.as[String]}
  lazy val valign = attributes.get("@valign") map { _.as[Valign]}
}

      


case class Tr(troption: Seq[scalaxb.DataRecord[com.gu.nitf.model.TrOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TableOption2 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[Align]}
  lazy val char = attributes.get("@char") map { _.as[String]}
  lazy val charoff = attributes.get("@charoff") map { _.as[String]}
  lazy val valign = attributes.get("@valign") map { _.as[Valign]}
}

      

trait TrOption
trait NowrapType

object NowrapType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.NowrapType]): NowrapType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: NowrapType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[NowrapType] = Seq(NowrapValue2)
}

case object NowrapValue2 extends NowrapType { override def toString = "nowrap" }


case class Th(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TrOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val axis = attributes.get("@axis") map { _.as[String]}
  lazy val axes = attributes.get("@axes") map { _.as[String]}
  lazy val nowrap = attributes.get("@nowrap") map { _.as[NowrapType]}
  lazy val rowspan = attributes.get("@rowspan") map { _.as[String]}
  lazy val colspan = attributes.get("@colspan") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[Align]}
  lazy val char = attributes.get("@char") map { _.as[String]}
  lazy val charoff = attributes.get("@charoff") map { _.as[String]}
  lazy val valign = attributes.get("@valign") map { _.as[Valign]}
}

      

trait ThOption
trait NowrapType2

object NowrapType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.NowrapType2]): NowrapType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: NowrapType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[NowrapType2] = Seq(NowrapValue3)
}

case object NowrapValue3 extends NowrapType2 { override def toString = "nowrap" }


case class Td(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TrOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val axis = attributes.get("@axis") map { _.as[String]}
  lazy val axes = attributes.get("@axes") map { _.as[String]}
  lazy val nowrap = attributes.get("@nowrap") map { _.as[NowrapType2]}
  lazy val rowspan = attributes.get("@rowspan") map { _.as[String]}
  lazy val colspan = attributes.get("@colspan") map { _.as[String]}
  lazy val align = attributes.get("@align") map { _.as[Align]}
  lazy val char = attributes.get("@char") map { _.as[String]}
  lazy val charoff = attributes.get("@charoff") map { _.as[String]}
  lazy val valign = attributes.get("@valign") map { _.as[Valign]}
}

      

trait TdOption

case class Chron(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val norm = attributes.get("@norm") map { _.as[String]}
}

      


case class Event(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with IdentifiedContentOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val startDate = attributes.get("@start-date") map { _.as[String]}
  lazy val endDate = attributes.get("@end-date") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      

trait EventOption

case class FunctionType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with IdentifiedContentOption with Hl2Option with POption with PersonOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      

trait FunctionTypeOption

case class Location(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with IdentifiedContentOption with Hl2Option with BylineOption with DatelineOption with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val locationCode = attributes.get("@location-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      

trait LocationOption

case class Sublocation(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocationOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val locationCode = attributes.get("@location-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      

trait SublocationOption

case class City(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocationOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val cityCode = attributes.get("@city-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      

trait CityOption

case class State(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocationOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val stateCode = attributes.get("@state-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      

trait StateOption

case class Region(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocationOption with PostaddrOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val regionCode = attributes.get("@region-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      

trait RegionOption

case class Country(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends LocationOption with PostaddrOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val isoCc = attributes.get("@iso-cc") map { _.as[String]}
}

      

trait CountryOption

case class Money(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val unit = attributes.get("@unit") map { _.as[String]}
  lazy val date = attributes.get("@date") map { _.as[String]}
}

      


case class Num(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val units = attributes.get("@units") map { _.as[String]}
  lazy val decimalCh = attributes.get("@decimal-ch") map { _.as[String]}
  lazy val thousandsCh = attributes.get("@thousands-ch") map { _.as[String]}
}

      

trait NumOption

case class Frac(numer: com.gu.nitf.model.Numer,
  fracSep: Option[com.gu.nitf.model.FracSep] = None,
  denom: com.gu.nitf.model.Denom,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends NumOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class Numer(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class FracSep(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class Denom(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class Sub(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends NumOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class Sup(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends NumOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class ObjectTitle(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with IdentifiedContentOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      

trait ObjectTitleOption

case class Org(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with IdentifiedContentOption with Hl2Option with ByttlOption with DistributorOption with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      

trait OrgOption

case class AltCode(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventOption with FunctionTypeOption with LocationOption with SublocationOption with CityOption with StateOption with RegionOption with CountryOption with ObjectTitleOption with OrgOption with PersonOption with VirtlocOption with ClassifierOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val idsrc = attributes("@idsrc").as[String]
  lazy val valueAttribute = attributes("@value").as[String]
}

      

trait Gender

object Gender {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Gender]): Gender = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Gender) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Gender] = Seq(Male, Female)
}

case object Male extends Gender { override def toString = "male" }
case object Female extends Gender { override def toString = "female" }


case class Person(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with IdentifiedContentOption with Hl2Option with BylineOption with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[Gender]}
}

      

trait PersonOption

case class NameGiven(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PersonOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class NameFamily(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PersonOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class Postaddr(addressee: com.gu.nitf.model.Addressee,
  deliveryPoint: Option[com.gu.nitf.model.DeliveryPoint] = None,
  postaddroption: Seq[scalaxb.DataRecord[com.gu.nitf.model.PostaddrOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait PostaddrOption

case class Virtloc(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with IdentifiedContentOption with Hl2Option with BylineOption with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      

trait VirtlocOption

case class A(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[String]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val rev = attributes.get("@rev") map { _.as[String]}
  lazy val title = attributes.get("@title") map { _.as[String]}
}

      

trait AOption

case class Br(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption with DeliveryPointOption with DeliveryOfficeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class Em(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      

trait EmOption

case class Lang(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      

trait LangOption

case class Pronounce(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val guide = attributes.get("@guide") map { _.as[String]}
  lazy val phonetic = attributes.get("@phonetic") map { _.as[String]}
}

      

trait PronounceOption

case class Q(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val quoteSource = attributes.get("@quote-source") map { _.as[String]}
}

      

trait QOption

case class Addressee(person: com.gu.nitf.model.Person,
  function: Option[com.gu.nitf.model.FunctionType] = None,
  careOf: Option[com.gu.nitf.model.CareOf] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class CareOf(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      


case class DeliveryPoint(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val pointCode = attributes.get("@point-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      

trait DeliveryPointOption

case class Postcode(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PostaddrOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      


case class DeliveryOffice(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PostaddrOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val officeCode = attributes.get("@office-code") map { _.as[String]}
  lazy val codeSource = attributes.get("@code-source") map { _.as[String]}
}

      

trait DeliveryOfficeOption

case class BodyEnd(tagline: Option[com.gu.nitf.model.Tagline] = None,
  bibliography: Option[com.gu.nitf.model.Bibliography] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait TypeType3

object TypeType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.TypeType3]): TypeType3 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TypeType3) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TypeType3] = Seq(StdValue, PaValue, NpaValue)
}

case object StdValue extends TypeType3 { override def toString = "std" }
case object PaValue extends TypeType3 { override def toString = "pa" }
case object NpaValue extends TypeType3 { override def toString = "npa" }


case class Tagline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val typeValue = attributes("@type").as[TypeType3]
}

      

trait TaglineOption

case class Bibliography(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class Classifier(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EnrichedTextOption with IdentifiedContentOption with Hl2Option with POption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      

trait ClassifierOption

case class NitfTable(nitfTableMetadata: com.gu.nitf.model.NitfTableMetadata,
  nitftableoption: scalaxb.DataRecord[com.gu.nitf.model.NitfTableOption],
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockContentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
}

      

trait NitfTableOption

case class CustomTable(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends NitfTableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class TableReference(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends NitfTableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val idref = attributes("@idref").as[String]
}

      

trait Status

object Status {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Status]): Status = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Status) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Status] = Seq(PreValue, SnapShot, Interim, Final, Official)
}

case object PreValue extends Status { override def toString = "pre" }
case object SnapShot extends Status { override def toString = "snap-shot" }
case object Interim extends Status { override def toString = "interim" }
case object Final extends Status { override def toString = "final" }
case object Official extends Status { override def toString = "official" }


case class NitfTableMetadata(nitfTableSummary: Option[com.gu.nitf.model.NitfTableSummary] = None,
  nitftablemetadataoption: Seq[scalaxb.DataRecord[com.gu.nitf.model.NitfTableMetadataOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val subclass = attributes.get("@subclass") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[Status]}
  lazy val columnCount = attributes.get("@column-count") map { _.as[String]}
  lazy val rowCount = attributes.get("@row-count") map { _.as[String]}
}

      

trait NitfTableMetadataOption

case class NitfTableSummary(p: Seq[com.gu.nitf.model.P] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
}

      


case class NitfColgroup(nitfcolgroupsequence1: Seq[com.gu.nitf.model.NitfColgroupSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends NitfTableMetadataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val occurrences = attributes.get("@occurrences") map { _.as[String]}
}

      

case class NitfColgroupSequence1(nitfCol: com.gu.nitf.model.NitfCol)
trait DataType

object DataType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.DataType]): DataType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DataType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DataType] = Seq(Text, Number, Graphic, OtherValue3)
}

case object Text extends DataType { override def toString = "text" }
case object Number extends DataType { override def toString = "number" }
case object Graphic extends DataType { override def toString = "graphic" }
case object OtherValue3 extends DataType { override def toString = "other" }


case class NitfCol(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends NitfTableMetadataOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val idsrc = attributes.get("@idsrc") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val occurrences = attributes.get("@occurrences") map { _.as[String]}
  lazy val dataType = attributes.get("@data-type") map { _.as[DataType]}
  lazy val dataFormat = attributes.get("@data-format") map { _.as[String]}
}

      

trait BlockContentOption
trait EnrichedTextOption

case class CellVAlign(valign: Option[com.gu.nitf.model.Valign] = None)


case class CommonNITFAttributes(id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)


case class GlobalNITFAttributes(id: Option[String] = None)


case class CellAlign(align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None)

