// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.gu.nitf.model


/** The core schema for the News Industry Text Format.Date of creation of this XML Schema document version: 2012-01-12 (xml_lang error fixed)
*/

trait Align

object Align {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Align]): Align = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Align) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Align] = Seq(LeftType, Center, RightType, Justify, CharType)
}

case object LeftType extends Align { override def toString = "left" }
case object Center extends Align { override def toString = "center" }
case object RightType extends Align { override def toString = "right" }
case object Justify extends Align { override def toString = "justify" }
case object CharType extends Align { override def toString = "char" }

trait Valign

object Valign {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Valign]): Valign = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Valign) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Valign] = Seq(Top, Middle, Bottom, Baseline)
}

case object Top extends Valign { override def toString = "top" }
case object Middle extends Valign { override def toString = "middle" }
case object Bottom extends Valign { override def toString = "bottom" }
case object Baseline extends Valign { override def toString = "baseline" }


case class Nitf(head: Option[com.gu.nitf.model.Head] = None,
  body: com.gu.nitf.model.Body,
  id: Option[String] = None,
  uno: Option[String] = None,
  baselang: Option[String] = None,
  classValue: Option[Seq[String]] = None)
      


case class Head(title: Option[com.gu.nitf.model.Title] = None,
  meta: Seq[com.gu.nitf.model.Meta] = Nil,
  tobject: Option[com.gu.nitf.model.Tobject] = None,
  iim: Option[com.gu.nitf.model.Iim] = None,
  docdata: Option[com.gu.nitf.model.Docdata] = None,
  pubdata: Seq[com.gu.nitf.model.Pubdata] = Nil,
  revisionHistory: Seq[com.gu.nitf.model.RevisionHistory] = Nil,
  id: Option[String] = None)
      

trait Type

object Type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Type]): Type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Type] = Seq(Main, Subtitle, Parttitle, Alternate, Abbrev, Other)
}

case object Main extends Type { override def toString = "main" }
case object Subtitle extends Type { override def toString = "subtitle" }
case object Parttitle extends Type { override def toString = "parttitle" }
case object Alternate extends Type { override def toString = "alternate" }
case object Abbrev extends Type { override def toString = "abbrev" }
case object Other extends Type { override def toString = "other" }


case class Title(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  typeValue: Option[com.gu.nitf.model.Type] = None)
      


case class Meta(id: Option[String] = None,
  httpEquiv: Option[String] = None,
  name: Option[String] = None,
  content: String)
      


case class Tobject(tobjectProperty: Seq[com.gu.nitf.model.TobjectProperty] = Nil,
  tobjectSubject: Seq[com.gu.nitf.model.TobjectSubject] = Nil,
  id: Option[String] = None,
  tobjectType: String)
      


case class TobjectProperty(id: Option[String] = None,
  tobjectPropertyType: String)
      


case class TobjectSubject(id: Option[String] = None,
  tobjectSubjectIpr: String,
  tobjectSubjectRefnum: String,
  tobjectSubjectCode: Option[String] = None,
  tobjectSubjectType: Option[String] = None,
  tobjectSubjectMatter: Option[String] = None,
  tobjectSubjectDetail: Option[String] = None)
      


case class Iim(ds: Seq[com.gu.nitf.model.Ds] = Nil,
  id: Option[String] = None,
  ver: Option[String] = None)
      


case class Ds(id: Option[String] = None,
  num: String,
  valueAttribute: Option[String] = None)
      


case class Docdata(docdataoption: Seq[scalaxb.DataRecord[com.gu.nitf.model.DocdataOption]] = Nil,
  id: Option[String] = None,
  managementStatus: Option[String] = None,
  managementDocIdref: Option[String] = None,
  managementIdrefStatus: Option[String] = None)
      

trait DocdataOption

case class Correction(id: Option[String] = None,
  info: Option[String] = None,
  idString: Option[String] = None,
  regsrc: Option[String] = None) extends DocdataOption
      


case class Evloc(id: Option[String] = None,
  isoCc: Option[String] = None,
  stateProv: Option[String] = None,
  countyDist: Option[String] = None,
  city: Option[String] = None) extends DocdataOption
      


case class DocId(id: Option[String] = None,
  regsrc: Option[String] = None,
  idString: Option[String] = None) extends DocdataOption
      


case class DelList(dellistsequence1: Seq[com.gu.nitf.model.DelListSequence1] = Nil,
  id: Option[String] = None) extends DocdataOption
      

case class DelListSequence1(fromSrc: com.gu.nitf.model.FromSrc)

case class FromSrc(id: Option[String] = None,
  srcName: Option[String] = None,
  levelNumber: Option[String] = None)
      


case class Urgency(id: Option[String] = None,
  edUrg: Option[String] = None) extends DocdataOption
      


case class Fixture(id: Option[String] = None,
  fixId: Option[String] = None) extends DocdataOption
      


case class DateIssue(id: Option[String] = None,
  norm: Option[String] = None) extends DocdataOption
      


case class DateRelease(id: Option[String] = None,
  norm: Option[String] = None) extends DocdataOption
      


case class DateExpire(id: Option[String] = None,
  norm: Option[String] = None) extends DocdataOption
      


case class DocScope(id: Option[String] = None,
  scope: Option[String] = None) extends DocdataOption
      


case class Series(id: Option[String] = None,
  seriesName: Option[String] = None,
  seriesPart: String,
  seriesTotalpart: String) extends DocdataOption
      


case class EdMsg(id: Option[String] = None,
  msgType: Option[String] = None,
  info: Option[String] = None) extends DocdataOption
      


case class DuKey(id: Option[String] = None,
  generation: Option[String] = None,
  part: Option[String] = None,
  version: Option[String] = None,
  key: Option[String] = None) extends DocdataOption
      


case class DocCopyright(id: Option[String] = None,
  year: Option[String] = None,
  holder: Option[String] = None) extends DocdataOption
      


case class DocRights(id: Option[String] = None,
  owner: Option[String] = None,
  startdate: Option[String] = None,
  enddate: Option[String] = None,
  agent: Option[String] = None,
  geography: Option[String] = None,
  locationCode: Option[String] = None,
  codeSource: Option[String] = None,
  typeValue: Option[String] = None,
  limitations: Option[String] = None) extends DocdataOption
      


case class KeyList(keylistsequence1: Seq[com.gu.nitf.model.KeyListSequence1] = Nil,
  id: Option[String] = None) extends DocdataOption
      

case class KeyListSequence1(keyword: com.gu.nitf.model.Keyword)

case class Keyword(id: Option[String] = None,
  key: Option[String] = None)
      


case class IdentifiedContent(identifiedcontentoption: Seq[scalaxb.DataRecord[com.gu.nitf.model.IdentifiedContentOption]] = Nil,
  id: Option[String] = None) extends DocdataOption
      

trait IdentifiedContentOption
trait TypeType

object TypeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.TypeType]): TypeType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TypeType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TypeType] = Seq(Print, Audio, Video, Web, Appliance, OtherValue)
}

case object Print extends TypeType { override def toString = "print" }
case object Audio extends TypeType { override def toString = "audio" }
case object Video extends TypeType { override def toString = "video" }
case object Web extends TypeType { override def toString = "web" }
case object Appliance extends TypeType { override def toString = "appliance" }
case object OtherValue extends TypeType { override def toString = "other" }


case class Pubdata(id: Option[String] = None,
  typeValue: Option[com.gu.nitf.model.TypeType] = None,
  itemLength: Option[String] = None,
  unitOfMeasure: Option[String] = None,
  datePublication: Option[String] = None,
  name: Option[String] = None,
  issn: Option[String] = None,
  volume: Option[String] = None,
  number: Option[String] = None,
  issue: Option[String] = None,
  editionName: Option[String] = None,
  editionArea: Option[String] = None,
  positionSection: Option[String] = None,
  positionSequence: Option[String] = None,
  exRef: Option[String] = None)
      

trait FunctionTypeType

object FunctionTypeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.FunctionTypeType]): FunctionTypeType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FunctionTypeType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FunctionTypeType] = Seq(WriterAuthor, Editor, Producer, Archivist, Videographer, GraphicArtist, Photographer, Statistician, OtherValue2)
}

case object WriterAuthor extends FunctionTypeType { override def toString = "writer-author" }
case object Editor extends FunctionTypeType { override def toString = "editor" }
case object Producer extends FunctionTypeType { override def toString = "producer" }
case object Archivist extends FunctionTypeType { override def toString = "archivist" }
case object Videographer extends FunctionTypeType { override def toString = "videographer" }
case object GraphicArtist extends FunctionTypeType { override def toString = "graphic-artist" }
case object Photographer extends FunctionTypeType { override def toString = "photographer" }
case object Statistician extends FunctionTypeType { override def toString = "statistician" }
case object OtherValue2 extends FunctionTypeType { override def toString = "other" }


case class RevisionHistory(id: Option[String] = None,
  name: Option[String] = None,
  function: Option[com.gu.nitf.model.FunctionTypeType] = None,
  norm: Option[String] = None,
  comment: Option[String] = None)
      


case class Body(bodyHead: Option[com.gu.nitf.model.BodyHead] = None,
  bodyContent: Seq[com.gu.nitf.model.BodyContent] = Nil,
  bodyEnd: Option[com.gu.nitf.model.BodyEnd] = None,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      


case class BodyHead(hedline: Seq[com.gu.nitf.model.Hedline] = Nil,
  note: Seq[com.gu.nitf.model.Note] = Nil,
  rights: Option[com.gu.nitf.model.Rights] = None,
  byline: Seq[com.gu.nitf.model.Byline] = Nil,
  distributor: Option[com.gu.nitf.model.Distributor] = None,
  dateline: Seq[com.gu.nitf.model.Dateline] = Nil,
  abstractValue: Seq[com.gu.nitf.model.Abstract] = Nil,
  series: Option[com.gu.nitf.model.Series] = None,
  id: Option[String] = None)
      


case class Hedline(hl1: com.gu.nitf.model.Hl1,
  hl2: Seq[com.gu.nitf.model.Hl2] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      


case class Hl1(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait Hl1Option

case class Hl2(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends BlockContentOption
      

trait Hl2Option
trait Noteclass

object Noteclass {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Noteclass]): Noteclass = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Noteclass) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Noteclass] = Seq(Cpyrt, End, Hd, Editorsnote, Trademk, Undef)
}

case object Cpyrt extends Noteclass { override def toString = "cpyrt" }
case object End extends Noteclass { override def toString = "end" }
case object Hd extends Noteclass { override def toString = "hd" }
case object Editorsnote extends Noteclass { override def toString = "editorsnote" }
case object Trademk extends Noteclass { override def toString = "trademk" }
case object Undef extends Noteclass { override def toString = "undef" }

trait TypeType2

object TypeType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.TypeType2]): TypeType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TypeType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TypeType2] = Seq(Std, Pa, Npa)
}

case object Std extends TypeType2 { override def toString = "std" }
case object Pa extends TypeType2 { override def toString = "pa" }
case object Npa extends TypeType2 { override def toString = "npa" }


case class Note(notesequence1: Seq[com.gu.nitf.model.NoteSequence1] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  noteclass: Option[com.gu.nitf.model.Noteclass] = None,
  typeValue: com.gu.nitf.model.TypeType2) extends BlockContentOption
      

case class NoteSequence1(bodyContent: com.gu.nitf.model.BodyContent)

case class Rights(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None)
      

trait RightsOption

case class RightsOwner(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  contact: Option[String] = None) extends RightsOption
      


case class RightsStartdate(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  norm: Option[String] = None) extends RightsOption
      


case class RightsEnddate(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  norm: Option[String] = None) extends RightsOption
      


case class RightsAgent(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  contact: Option[String] = None) extends RightsOption
      


case class RightsGeography(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  locationCode: Option[String] = None,
  codeSource: Option[String] = None) extends RightsOption
      


case class RightsType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None) extends RightsOption
      


case class RightsLimitations(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None) extends RightsOption
      


case class Byline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait BylineOption

case class Byttl(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None) extends BylineOption
      

trait ByttlOption

case class Distributor(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait DistributorOption

case class Dateline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait DatelineOption

case class StoryDate(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  norm: Option[String] = None) extends DatelineOption
      


case class Abstract(abstractoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait AbstractOption

case class Copyrite(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None) extends EnrichedTextOption
      

trait CopyriteOption

case class CopyriteYear(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None) extends CopyriteOption
      


case class CopyriteHolder(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None) extends CopyriteOption
      


case class BodyContent(bodycontentoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None)
      

trait BodyContentOption

case class Block(blocksequence1: Option[com.gu.nitf.model.BlockSequence1] = None,
  blockoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  blocksequence2: Option[com.gu.nitf.model.BlockSequence2] = None,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends BodyContentOption with DdOption
      

case class BlockSequence2(datasource: Option[com.gu.nitf.model.Datasource] = None)
trait BlockOption
case class BlockSequence1(tobject: Option[com.gu.nitf.model.Tobject] = None,
  keyList: Option[com.gu.nitf.model.KeyList] = None,
  classifier: Seq[com.gu.nitf.model.Classifier] = Nil,
  byline: Option[com.gu.nitf.model.Byline] = None,
  dateline: Option[com.gu.nitf.model.Dateline] = None,
  copyrite: Option[com.gu.nitf.model.Copyrite] = None,
  abstractValue: Seq[com.gu.nitf.model.Abstract] = Nil)


case class P(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  lede: Option[String] = None,
  summary: Option[String] = None,
  optionalText: Option[String] = None) extends BlockContentOption
      

trait POption
trait AlignType

object AlignType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.AlignType]): AlignType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: AlignType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[AlignType] = Seq(LeftTypeValue, CenterValue, RightTypeValue)
}

case object LeftTypeValue extends AlignType { override def toString = "left" }
case object CenterValue extends AlignType { override def toString = "center" }
case object RightTypeValue extends AlignType { override def toString = "right" }

trait Frame

object Frame {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Frame]): Frame = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Frame) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Frame] = Seq(Void, Above, Below, Hsides, Lhs, Rhs, Vsides, Box, Border)
}

case object Void extends Frame { override def toString = "void" }
case object Above extends Frame { override def toString = "above" }
case object Below extends Frame { override def toString = "below" }
case object Hsides extends Frame { override def toString = "hsides" }
case object Lhs extends Frame { override def toString = "lhs" }
case object Rhs extends Frame { override def toString = "rhs" }
case object Vsides extends Frame { override def toString = "vsides" }
case object Box extends Frame { override def toString = "box" }
case object Border extends Frame { override def toString = "border" }

trait Rules

object Rules {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Rules]): Rules = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Rules) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Rules] = Seq(NoneType, Basic, Rows, Cols, AllType)
}

case object NoneType extends Rules { override def toString = "none" }
case object Basic extends Rules { override def toString = "basic" }
case object Rows extends Rules { override def toString = "rows" }
case object Cols extends Rules { override def toString = "cols" }
case object AllType extends Rules { override def toString = "all" }


case class Table(caption: Option[com.gu.nitf.model.Caption] = None,
  tableoption: Option[scalaxb.DataRecord[com.gu.nitf.model.TableOption]] = None,
  thead: Option[com.gu.nitf.model.Thead] = None,
  tfoot: Option[com.gu.nitf.model.Tfoot] = None,
  tableoption2: Seq[scalaxb.DataRecord[com.gu.nitf.model.TableOption2]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  tabletype: Option[String] = None,
  align: Option[com.gu.nitf.model.AlignType] = None,
  width: Option[String] = None,
  cols: Option[String] = None,
  border: Option[String] = None,
  frame: Option[com.gu.nitf.model.Frame] = None,
  rules: Option[com.gu.nitf.model.Rules] = None,
  cellspacing: Option[String] = None,
  cellpadding: Option[String] = None) extends BlockContentOption with NitfTableOption
      

trait TableOption
trait TableOption2

case class Media(mediaMetadata: Seq[com.gu.nitf.model.MediaMetadata] = Nil,
  mediasequence1: Seq[com.gu.nitf.model.MediaSequence1] = Nil,
  mediaCaption: Seq[com.gu.nitf.model.MediaCaption] = Nil,
  mediaProducer: Seq[com.gu.nitf.model.MediaProducer] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  mediaType: String) extends BlockContentOption
      

case class MediaSequence1(mediaReference: com.gu.nitf.model.MediaReference,
  mediaObject: Option[com.gu.nitf.model.MediaObject] = None)

trait Units

object Units {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Units]): Units = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Units) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Units] = Seq(Pixels)
}

case object Pixels extends Units { override def toString = "pixels" }

trait Noflow

object Noflow {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Noflow]): Noflow = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Noflow) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Noflow] = Seq(NoflowValue)
}

case object NoflowValue extends Noflow { override def toString = "noflow" }


case class MediaReference(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  source: Option[String] = None,
  name: Option[String] = None,
  mimeType: Option[String] = None,
  coding: Option[String] = None,
  time: Option[String] = None,
  timeUnitOfMeasure: Option[String] = None,
  outcue: Option[String] = None,
  sourceCredit: Option[String] = None,
  copyright: Option[String] = None,
  alternateText: Option[String] = None,
  height: Option[String] = None,
  width: Option[String] = None,
  units: Option[com.gu.nitf.model.Units] = None,
  imagemap: Option[String] = None,
  noflow: Option[com.gu.nitf.model.Noflow] = None,
  dataLocation: Option[String] = None)
      


case class MediaMetadata(id: Option[String] = None,
  name: String,
  valueAttribute: Option[String] = None)
      


case class MediaObject(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  encoding: String)
      


case class MediaCaption(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait MediaCaptionOption

case class MediaProducer(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait MediaProducerOption

case class Ol(olsequence1: Seq[com.gu.nitf.model.OlSequence1] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  seqnum: Option[String] = None) extends BlockContentOption
      

case class OlSequence1(li: com.gu.nitf.model.Li)

case class Ul(ulsequence1: Seq[com.gu.nitf.model.UlSequence1] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends BlockContentOption
      

case class UlSequence1(li: com.gu.nitf.model.Li)

case class Li(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait LiOption

case class Dl(dloption: Seq[scalaxb.DataRecord[com.gu.nitf.model.DlOption]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends BlockContentOption
      

trait DlOption

case class Dt(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends DlOption
      

trait DtOption

case class Dd(ddoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends DlOption
      

trait DdOption
trait Nowrap

object Nowrap {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Nowrap]): Nowrap = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Nowrap) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Nowrap] = Seq(NowrapValue)
}

case object NowrapValue extends Nowrap { override def toString = "nowrap" }


case class Bq(bqsequence1: Seq[com.gu.nitf.model.BqSequence1] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  nowrap: Option[com.gu.nitf.model.Nowrap] = None,
  quoteSource: Option[String] = None) extends BlockContentOption
      

case class BqSequence1(block: Seq[com.gu.nitf.model.Block] = Nil,
  credit: Option[com.gu.nitf.model.Credit] = None)


case class Credit(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      

trait CreditOption

case class Fn(fnsequence1: Seq[com.gu.nitf.model.FnSequence1] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends BlockContentOption
      

case class FnSequence1(bodyContent: com.gu.nitf.model.BodyContent)

case class Pre(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends BlockContentOption
      


case class Hr(id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends BlockContentOption
      


case class Datasource(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None)
      

trait AlignType2

object AlignType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.AlignType2]): AlignType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: AlignType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[AlignType2] = Seq(TopValue, BottomValue, LeftTypeValue2, RightTypeValue2)
}

case object TopValue extends AlignType2 { override def toString = "top" }
case object BottomValue extends AlignType2 { override def toString = "bottom" }
case object LeftTypeValue2 extends AlignType2 { override def toString = "left" }
case object RightTypeValue2 extends AlignType2 { override def toString = "right" }


case class Caption(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  align: Option[com.gu.nitf.model.AlignType2] = None)
      

trait CaptionOption

case class Col(id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  span: String,
  width: Option[String] = None,
  align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None,
  valign: Option[com.gu.nitf.model.Valign] = None) extends TableOption
      


case class Colgroup(col: Seq[com.gu.nitf.model.Col] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None,
  valign: Option[com.gu.nitf.model.Valign] = None) extends TableOption
      


case class Thead(tr: Seq[com.gu.nitf.model.Tr] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None,
  valign: Option[com.gu.nitf.model.Valign] = None)
      


case class Tbody(tr: Seq[com.gu.nitf.model.Tr] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None,
  valign: Option[com.gu.nitf.model.Valign] = None) extends TableOption2
      


case class Tfoot(tr: Seq[com.gu.nitf.model.Tr] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None,
  valign: Option[com.gu.nitf.model.Valign] = None)
      


case class Tr(troption: Seq[scalaxb.DataRecord[com.gu.nitf.model.TrOption]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None,
  valign: Option[com.gu.nitf.model.Valign] = None) extends TableOption2
      

trait TrOption
trait NowrapType

object NowrapType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.NowrapType]): NowrapType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: NowrapType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[NowrapType] = Seq(NowrapValue2)
}

case object NowrapValue2 extends NowrapType { override def toString = "nowrap" }


case class Th(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  axis: Option[String] = None,
  axes: Option[String] = None,
  nowrap: Option[com.gu.nitf.model.NowrapType] = None,
  rowspan: Option[String] = None,
  colspan: Option[String] = None,
  align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None,
  valign: Option[com.gu.nitf.model.Valign] = None) extends TrOption
      

trait ThOption
trait NowrapType2

object NowrapType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.NowrapType2]): NowrapType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: NowrapType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[NowrapType2] = Seq(NowrapValue3)
}

case object NowrapValue3 extends NowrapType2 { override def toString = "nowrap" }


case class Td(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  axis: Option[String] = None,
  axes: Option[String] = None,
  nowrap: Option[com.gu.nitf.model.NowrapType2] = None,
  rowspan: Option[String] = None,
  colspan: Option[String] = None,
  align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None,
  valign: Option[com.gu.nitf.model.Valign] = None) extends TrOption
      

trait TdOption

case class Chron(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  norm: Option[String] = None) extends EnrichedTextOption
      


case class Event(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  startDate: Option[String] = None,
  endDate: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None) extends EnrichedTextOption with IdentifiedContentOption
      

trait EventOption

case class FunctionType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None) extends EnrichedTextOption with IdentifiedContentOption with PersonOption
      

trait FunctionTypeOption

case class Location(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  locationCode: Option[String] = None,
  codeSource: Option[String] = None) extends EnrichedTextOption with IdentifiedContentOption with BylineOption with DatelineOption
      

trait LocationOption

case class Sublocation(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  locationCode: Option[String] = None,
  codeSource: Option[String] = None) extends LocationOption
      

trait SublocationOption

case class City(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  cityCode: Option[String] = None,
  codeSource: Option[String] = None) extends LocationOption
      

trait CityOption

case class State(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  stateCode: Option[String] = None,
  codeSource: Option[String] = None) extends LocationOption
      

trait StateOption

case class Region(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  regionCode: Option[String] = None,
  codeSource: Option[String] = None) extends LocationOption with PostaddrOption
      

trait RegionOption

case class Country(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  isoCc: Option[String] = None) extends LocationOption with PostaddrOption
      

trait CountryOption

case class Money(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  unit: Option[String] = None,
  date: Option[String] = None) extends EnrichedTextOption
      


case class Num(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  units: Option[String] = None,
  decimalCh: Option[String] = None,
  thousandsCh: Option[String] = None) extends EnrichedTextOption
      

trait NumOption

case class Frac(numer: com.gu.nitf.model.Numer,
  fracSep: Option[com.gu.nitf.model.FracSep] = None,
  denom: com.gu.nitf.model.Denom,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends NumOption
      


case class Numer(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None)
      


case class FracSep(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None)
      


case class Denom(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None)
      


case class Sub(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends NumOption
      


case class Sup(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends NumOption
      


case class ObjectTitle(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None) extends EnrichedTextOption with IdentifiedContentOption
      

trait ObjectTitleOption

case class Org(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None) extends EnrichedTextOption with IdentifiedContentOption with ByttlOption with DistributorOption
      

trait OrgOption

case class AltCode(id: Option[String] = None,
  idsrc: String,
  valueAttribute: String) extends EventOption with FunctionTypeOption with LocationOption with SublocationOption with CityOption with StateOption with RegionOption with CountryOption with ObjectTitleOption with OrgOption with PersonOption with VirtlocOption with ClassifierOption
      

trait Gender

object Gender {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Gender]): Gender = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Gender) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Gender] = Seq(Male, Female)
}

case object Male extends Gender { override def toString = "male" }
case object Female extends Gender { override def toString = "female" }


case class Person(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None,
  gender: Option[com.gu.nitf.model.Gender] = None) extends EnrichedTextOption with IdentifiedContentOption with BylineOption
      

trait PersonOption

case class NameGiven(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends PersonOption
      


case class NameFamily(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends PersonOption
      


case class Postaddr(addressee: com.gu.nitf.model.Addressee,
  deliveryPoint: Option[com.gu.nitf.model.DeliveryPoint] = None,
  postaddroption: Seq[scalaxb.DataRecord[com.gu.nitf.model.PostaddrOption]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends EnrichedTextOption
      

trait PostaddrOption

case class Virtloc(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None) extends EnrichedTextOption with IdentifiedContentOption with BylineOption
      

trait VirtlocOption

case class A(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  href: Option[String] = None,
  name: Option[String] = None,
  rel: Option[String] = None,
  rev: Option[String] = None,
  title: Option[String] = None) extends EnrichedTextOption
      

trait AOption

case class Br(id: Option[String] = None) extends EnrichedTextOption with DeliveryPointOption with DeliveryOfficeOption
      


case class Em(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends EnrichedTextOption
      

trait EmOption

case class Lang(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None) extends EnrichedTextOption
      

trait LangOption

case class Pronounce(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  guide: Option[String] = None,
  phonetic: Option[String] = None) extends EnrichedTextOption
      

trait PronounceOption

case class Q(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  quoteSource: Option[String] = None) extends EnrichedTextOption
      

trait QOption

case class Addressee(person: com.gu.nitf.model.Person,
  function: Option[com.gu.nitf.model.FunctionType] = None,
  careOf: Option[com.gu.nitf.model.CareOf] = None,
  id: Option[String] = None)
      


case class CareOf(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None)
      


case class DeliveryPoint(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  pointCode: Option[String] = None,
  codeSource: Option[String] = None)
      

trait DeliveryPointOption

case class Postcode(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  codeSource: Option[String] = None) extends PostaddrOption
      


case class DeliveryOffice(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  officeCode: Option[String] = None,
  codeSource: Option[String] = None) extends PostaddrOption
      

trait DeliveryOfficeOption

case class BodyEnd(tagline: Option[com.gu.nitf.model.Tagline] = None,
  bibliography: Option[com.gu.nitf.model.Bibliography] = None,
  id: Option[String] = None)
      

trait TypeType3

object TypeType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.TypeType3]): TypeType3 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TypeType3) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TypeType3] = Seq(StdValue, PaValue, NpaValue)
}

case object StdValue extends TypeType3 { override def toString = "std" }
case object PaValue extends TypeType3 { override def toString = "pa" }
case object NpaValue extends TypeType3 { override def toString = "npa" }


case class Tagline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  typeValue: com.gu.nitf.model.TypeType3)
      

trait TaglineOption

case class Bibliography(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      


case class Classifier(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  typeValue: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None) extends EnrichedTextOption with IdentifiedContentOption
      

trait ClassifierOption

case class NitfTable(nitfTableMetadata: com.gu.nitf.model.NitfTableMetadata,
  nitftableoption: scalaxb.DataRecord[com.gu.nitf.model.NitfTableOption],
  id: Option[String] = None) extends BlockContentOption
      

trait NitfTableOption

case class CustomTable(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None) extends NitfTableOption
      


case class TableReference(id: Option[String] = None,
  idref: String) extends NitfTableOption
      

trait Status

object Status {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.Status]): Status = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Status) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Status] = Seq(PreValue, SnapShot, Interim, Final, Official)
}

case object PreValue extends Status { override def toString = "pre" }
case object SnapShot extends Status { override def toString = "snap-shot" }
case object Interim extends Status { override def toString = "interim" }
case object Final extends Status { override def toString = "final" }
case object Official extends Status { override def toString = "official" }


case class NitfTableMetadata(nitfTableSummary: Option[com.gu.nitf.model.NitfTableSummary] = None,
  nitftablemetadataoption: Seq[scalaxb.DataRecord[com.gu.nitf.model.NitfTableMetadataOption]] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None,
  subclass: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None,
  status: Option[com.gu.nitf.model.Status] = None,
  columnCount: Option[String] = None,
  rowCount: Option[String] = None)
      

trait NitfTableMetadataOption

case class NitfTableSummary(p: Seq[com.gu.nitf.model.P] = Nil,
  id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)
      


case class NitfColgroup(nitfcolgroupsequence1: Seq[com.gu.nitf.model.NitfColgroupSequence1] = Nil,
  id: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None,
  occurrences: Option[String] = None) extends NitfTableMetadataOption
      

case class NitfColgroupSequence1(nitfCol: com.gu.nitf.model.NitfCol)
trait DataType

object DataType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[com.gu.nitf.model.DataType]): DataType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DataType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DataType] = Seq(Text, Number, Graphic, OtherValue3)
}

case object Text extends DataType { override def toString = "text" }
case object Number extends DataType { override def toString = "number" }
case object Graphic extends DataType { override def toString = "graphic" }
case object OtherValue3 extends DataType { override def toString = "other" }


case class NitfCol(id: Option[String] = None,
  idsrc: Option[String] = None,
  valueAttribute: Option[String] = None,
  occurrences: Option[String] = None,
  dataType: Option[com.gu.nitf.model.DataType] = None,
  dataFormat: Option[String] = None) extends NitfTableMetadataOption
      

trait BlockContentOption
trait EnrichedTextOption

case class CellVAlign(valign: Option[com.gu.nitf.model.Valign] = None)


case class CommonNITFAttributes(id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  xmllang: Option[String] = None)


case class GlobalNITFAttributes(id: Option[String] = None)


case class CellAlign(align: Option[com.gu.nitf.model.Align] = None,
  char: Option[String] = None,
  charoff: Option[String] = None)

